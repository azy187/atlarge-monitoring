services:
  pg-db:
    image: postgres
    container_name: ${POSTGRES_HOST}
    env_file: .env
    restart: always
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./infra/database:/docker-entrypoint-initdb.d
      - database-v:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      start_period: 0s
      interval: 5s
      timeout: 5s
      retries: 3
  api-v1:
    image: api-v1:1.0.0
    container_name: ${API_HOST}
    build:
      context: .
      dockerfile: /infra/docker/api/v1/Dockerfile
    volumes:
      - ./apps/api/v1/:/apps/api/v1/
    env_file: .env
    restart: always
    ports:
      - ${API_PORT}:${API_PORT}
    networks:
      - app_network
      - playwright-test-network
    depends_on:
      pg-db:
        condition: service_healthy
  web:
    image: web:1.0.0
    container_name: ${REVERSE_PROXY_HOST}
    build:
      context: .
      dockerfile: /infra/docker/web/Dockerfile
    restart: always
    ports:
      - ${REVERSE_PROXY_PORT}:${REVERSE_PROXY_PORT}
    networks:
      - app_network
    depends_on:
      - api-v1
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    extra_hosts:
      - "host.docker.internal:host-gateway"
volumes:
  database-v:
    name: "database-v"

networks:
  app_network:
    external: true
